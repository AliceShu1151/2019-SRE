153,Add extension point for postprocessing of usages in the course of Move refactoring
2014-02-21T14:47:31Z,discuss,In Kotlin rebinding of PsiReference may require file analysis which can lead to poor performance when many usages are located in the same file. This extension point would allow to postpone reference update until the end of refactoring and avoid unnecessary analysis.
2014-02-21T16:18:42Z,discuss,"rebind is used not only in move refactoring, would we add separate extension points for each batch command we have?"
2014-02-21T16:32:45Z,discuss,I guess this extension point can be reused in other commands as well (after some rename/move).
2014-02-21T16:48:33Z,discuss,Please show the code you'd like to add to kotlin.
2014-02-21T16:48:33Z,discuss,"BTW Probably Kotlin should put rebind requests in some alarm and process them per file, at least I don't see why it can't be done from your description."
2014-02-21T16:56:23Z,discuss,How can I get the alarm to execute requests right after refactoring is complete?
2014-02-21T17:08:24Z,discuss,Why do you need to perform that right after? If you invoke another write action most probably it won't be merged with refactoring command and you won't get smooth undo nethertheless.
2014-02-21T17:57:14Z,discuss,"That may work. Ok, I'll try to implement it with alerts, then."
2014-02-24T09:02:19Z,discuss,"Please realize that any kind of invokeLater/alarm/executeOnPooledThread/etc is much harder than it seems to get totally correct. When you add an alarm, you cannot rely on anything being true inside of that runnable you pass to it. Most of the time it will be OK (and this will give you a false feeling of safety) but not always. The user might have typed something in the editor, changed project settings, updated from VCS, closed the editor or even the project. You can't rely on the PSI being still valid. So you probably should very carefully check that the action you intend to perform is still applicable and decide what to do if it's not: give up, reschedule, alert the user, etc."
2014-02-24T09:02:19Z,discuss,"I'd say the best solution would be making Kotlin fast. The next best one would be to have a dedicated API that at least is called in a predictable moment and with some PSI validity guarantees. Finally, if we're talking about hacks, I'd use ApplicationListener and perform something after the current write action finishes. That still doesn't guarantee your PSI to remain valid, but at least the project is still there, and its model hopefully hasn't changed dramatically."
2014-02-24T09:02:19Z,discuss,But of course it all depends on the stability level you want for your functionality.
2014-02-24T09:45:07Z,discuss,"Thank you for explanation. I suppose that while improving analysis performance is still a work in progress, solution with ApplicationListener should be usable enough to ensure proper interoperability with Java refactorings (in most cases)."
2014-02-24T11:54:15Z,discuss,"In fact, I found a better way to do it through RefactoringHelper extension. Thank you for assistance"
2014-02-26T15:16:35Z,discuss,"There is another difficulty with update of constructor calls when corresponding class is inner, but being moved to the top level. For example, call like A(""a"").B(""b"") have to be transformed to B(A(""a""), ""b""). RefactoringHelper is not aware of the refactoring context, so we have to rely on some heuristics to update constructor calls. As far as I can see, MoveInnerProcessor have no extension for such usage processing and all Java-specific cases (like PsiNewExpression) are handled directly in its code. What do you think about adding an extension point here?"
2014-02-27T07:48:24Z,discuss,"I need to check the details but I suppose that MoveInnerProcessor could be refactored in such a way. If you'll be able to provide your own processor, would it suite you?"
2014-02-27T09:03:22Z,discuss,"Yes, I think it would
If it's OK I can prepare a pull request"
2014-03-12T11:35:11Z,discuss,"Please, look at #159"
2014-02-21T12:22:38Z,commit,Add extension point for postprocessing of usages in the course of Mov¡­,github.com/JetBrains/intellij-community/pull/153/commits/6feb38e2c062e89a741067836fed5764b22d0829
