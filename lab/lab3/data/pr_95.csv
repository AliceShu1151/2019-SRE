95,Implement extension support for MethodTextOccurrenceProcessor
2013-09-09T14:14:16Z,discuss,This pull request delegates signature comparison performed by MethodTextOccurrenceProcessor to its extensions. Therefore deciding whether particular reference satisfies search criteria can be extended to support comparison with non-Java PSI elements.
2013-09-09T14:14:16Z,discuss,The main goal is to allow Kotlin plugin to reuse most of the existing Java method search infrastructure.
2013-09-10T11:38:32Z,discuss,Why don't you simply write another QueryExecutor to find Kotlin's usages? Currently it looks like the amount of code you'll be able to reuse is hardly higher than the amount of additional infrastructure you're creating to enable the reuse.
2013-09-10T11:57:01Z,discuss,"Separate QueryExecutor is always an option, but then we have to basically duplicate MethodUsagesSearcher and MethodTextOccurrenceProcessor (with very minor changes like changing class name of request processor and replacing kotlin function with its Java view). Extension allows to reuse both with a cost of one extra interface and implementation class, so at large it seems more preferable to me."
2013-09-10T12:37:03Z,discuss,"Maybe you could inherit from the existing implementations? All searchers for other languages and search types are implemented as separate classes, and it seems really inconsistent to add an extension point in this single place."
2013-09-10T13:11:48Z,discuss,"Inheritance won't help because in this case it still requires to copy-and-paste most of search class implementation. I've looked at Groovy and Scala plugins, but they don't have the problem, since their method PSIs are inherited from Java's PsiMethod. Unfortunately this is not the case for Kotlin where functions are separate from their Java counterparts."
2013-09-10T13:11:48Z,discuss,"It is possible to add separate searcher which finds koltin-only references (Java references to Kotlin function are found without additional changes), but this would cause MethodTextOccurrenceProcessor to search the same string twice: first time looking for Java-only references, second time - for Kotlin-only references, which may be not good from performance viewpoint"
2013-09-10T15:02:29Z,discuss,I still don't see why a large amount of copy/paste would be required when inheriting from the existing implementations. You're welcome to refactor the existing platform code to reduce the need of duplication (extract some methods etc.).
2013-09-10T15:02:29Z,discuss,Performance is not really an issue because the usage of SearchRequestCollector in the existing code ensures that the word search (the expensive part) will not be performed twice.
2013-09-10T15:16:54Z,discuss,"Ok, I'll proceed with refactoring then"
2013-09-09T13:59:02Z,commit,Implement extension support for MethodTextOccurrenceProcessor,github.com/JetBrains/intellij-community/pull/95/commits/2f7d80b602b98b1588cbd0b5bd04420de35f0440
