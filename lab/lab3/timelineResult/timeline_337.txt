************************************************************************
* id: 337
* requirement: IDEA-143271 - Correctly stub classes containing a dollar in their name.
*=======================================================================
* no changes, only the initial requirement, implements, and discussion.
*=======================================================================
************************************************************************
* type: implements
*-----------------------------------------------------------------------
* time: 2015-12-29T15:53:18Z
* content: Correctly stub classes containing a dollar in their name.
* codeUrl: github.com/JetBrains/intellij-community/pull/337/commits/141d2579d2170d199f85151ab82c2c5c08d5fbc5
************************************************************************
************************************************************************
* type: discussion
*-----------------------------------------------------------------------
* time: 2015-12-29T16:34:54Z
* content: This PR adds a fix for https://youtrack.jetbrains.com/issue/IDEA-143271.
* time: 2015-12-29T16:34:54Z
* content: Classes containing a dollar in their name, but which are not nested classes generated by javac, are correctly stubbed. There is one remaining problem though, and I can't find a good solution to fix it. The class is correctly indexed as Foo$Bar, but the Type's canonical text is still Foo.Bar because StubBuildingVisitor is making an incorrect assumption:
* time: 2015-12-31T11:34:27Z
* content: Unfortunately, we cannot accept this. I tried this approach before, and it causes a great deal more problem than it solves. I wish JVMS has never allowed '$' in identifiers :)
* time: 2015-12-31T11:39:07Z
* content: Do you plan on fixing the problem in any other way?
* time: 2015-12-31T11:48:21Z
* content: Sure, but it may take some time. Looking now on your sample project.
* time: 2015-12-31T12:26:09Z
* content: IMO ClsFileImpl.buildFileStub can detect inner class state correctly from content (after calling ClassFileViewProvider.isInnerClass(file))
* time: 2015-12-31T12:56:12Z
* content: I'm currently testing the following fix in ClassFileViewProvider:
* time: 2015-12-31T12:56:12Z
* content: i.e. I always instantiate a ClsFileImpl to read the bytecode, but I only return it if it doesn't represent an inner class. Then the fix mentioned by @nicity should work for the other usage of isInnerClass.
* time: 2015-12-31T13:23:03Z
* content: @trespasserw @nicity do you think this fix is better? bjansen@5a97c80
* time: 2015-12-31T14:15:31Z
* content: @bjansen less effective, and the file without a stub doesn't make much sense anyway. @nicity is right, this should be fixed in ClassFileViewProvider.isInnerClass().
* time: 2015-12-31T14:21:10Z
* content: But it's not possible to determine whether it's an inner class without actually reading the class content...
* time: 2015-12-31T14:21:10Z
* content: Not sure I understand what you mean, I'm not creating files without stubs?
* time: 2015-12-31T14:51:46Z
* content: That's true. I'm afraid content reading is unavoidable here.
************************************************************************
